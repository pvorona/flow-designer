import React, { useState } from 'react'
import { Observer } from 'mobx-react'
import { AutoHideDropdown, Option, Description } from '../Dropdown'
import { dropdownState, editState } from '../Store'
import styles from '../Dropdown/Option.module.css'
import { root } from '../App'

const ConditionIcon = (props) =>
  <svg width="28px" height="26px" className={styles.icon}>
    <path d="M14 7.23333333C15.9298222 7.23333333 17.5 5.66315556 17.5 3.73333333 17.5 1.80351111 15.9298222.233333333 14 .233333333 12.0701778.233333333 10.5 1.80351111 10.5 3.73333333 10.5 5.66315556 12.0701778 7.23333333 14 7.23333333zM14 2.56666667C14.6433778 2.56666667 15.1666667 3.08995556 15.1666667 3.73333333 15.1666667 4.37671111 14.6433778 4.9 14 4.9 13.3566222 4.9 12.8333333 4.37671111 12.8333333 3.73333333 12.8333333 3.08995556 13.3566222 2.56666667 14 2.56666667zM15.6498222 9.76702222L14 11.4168444 12.3501778 9.76702222 10.7003556 11.4168444 12.3501778 13.0666667 10.7003556 14.7164889 12.3501778 16.3663111 14 14.7164889 15.6498222 16.3663111 17.2996444 14.7164889 15.6498222 13.0666667 17.2996444 11.4168444zM13.1749333 22.4L11.5251111 20.7501778 9.87528889 22.4 13.1749333 25.6996444 18.1247111 20.7501778 16.4748889 19.1003556zM6.99688889 21.6222222L6.99688889 23.1777778 8.55555556 23.1777778 8.55244444 21.6222222zM4.69248889 13.9172444L5.43791111 13.8108444 5.21764444 12.2708444 4.44795556 12.3806667 3.62817778 12.5545778 3.95422222 14.0752889zM3.89853333 21.4358667L3.67857778 22.9758667 4.424 23.0825778 5.16226667 23.2403111 5.48831111 21.7196 4.72795556 21.5568889zM2.93906667 14.6539556L1.73537778 13.6689778.746044444 14.8776444 1.95408889 15.8579556zM.7504 20.594L1.73973333 21.8029778 2.93937778 20.8127111 1.9544 19.6090222zM1.55555556 16.9555556L0 16.9555556 0 18.5176444 1.55555556 18.5111111zM7 13.8444444L8.55555556 13.8444444 8.55555556 12.2888889 6.99688889 12.2888889zM19.4475556 4.51111111L21.0031111 4.51111111 21.0031111 2.95555556 19.4444444 2.95555556zM23.3075111 12.2160889L22.5620889 12.3224889 22.7823556 13.8624889 23.5520444 13.7526667 24.3718222 13.5787556 24.0457778 12.0580444zM24.1014667 4.69746667L24.3214222 3.15746667 23.576 3.05075556 22.8377333 2.89302222 22.5116889 4.41373333 23.2720444 4.57644444zM25.0609333 11.4793778L26.2646222 12.4643556 27.2539556 11.2556889 26.0459111 10.2753778zM27.2496 5.53933333L26.2602667 4.33035556 25.0606222 5.32062222 26.0456 6.52431111zM26.4444444 9.17777778L28 9.17777778 28 7.61568889 26.4444444 7.62222222zM19.4444444 12.2888889L19.4444444 13.8444444 21.0031111 13.8444444 21 12.2888889z" />
  </svg>

const BotIcon = (props) =>
  <svg width="25px" height="28px" className={styles.icon}>
    <path d="M24.55 19.88a10.22 10.22 0 0 1-4.5 5.9 14.51 14.51 0 0 1-7.78 2.19C6.4 27.97 1.5 24.72.1 19.89a2.95 2.95 0 0 1 .48-2.51c.48-.64 1.2-1 2.03-1h8.11a.8.8 0 0 0 .8-.8v-.43a.8.8 0 0 0-.8-.8h-6.5a2.51 2.51 0 0 1-2.48-2.55v-1.18c0-2.33.73-4.1 2.17-5.3a7.1 7.1 0 0 1 4.52-1.45h.19a.8.8 0 0 0 .8-.8V.8a.8.8 0 1 1 1.61 0v2.26c0 .44.36.8.8.8h4.34c1.87 0 3.47.52 4.64 1.5 1.4 1.17 2.12 2.92 2.12 5.2v1.23c0 1.4-1.11 2.54-2.48 2.54h-6.5a.8.8 0 0 0-.81.8v.44c0 .45.36.8.8.8h7.98c.91 0 1.7.36 2.2 1.01.5.68.67 1.6.43 2.49zm-4.1-7.15c.47 0 .87-.43.87-.93v-1.24c0-4.41-3.23-5.08-5.15-5.08H8.43c-1 0-2.4.19-3.5 1.1-1.05.86-1.58 2.22-1.58 4.04v1.18c0 .5.4.93.87.93h16.23zm2.39 5.65c-.2-.25-.5-.38-.92-.38H2.62a.88.88 0 0 0-.76.35c-.24.34-.3.81-.2 1.1 1.19 4.14 5.46 6.91 10.61 6.91 5.21 0 9.62-2.83 10.72-6.9.12-.4.05-.81-.15-1.08zM8 8.39a1.05 1.05 0 1 1 0 2.1 1.05 1.05 0 0 1 0-2.1zm8.67 0a1.05 1.05 0 1 1 0 2.1 1.05 1.05 0 0 1 0-2.1z" />
  </svg>

const HumanIcon = (props) =>
  <svg width="20px" height="28px" {...props} className={styles.icon}>
    <path d="M28.0149765,76.5780123 C27.7433283,76.4212179 27.4836294,76.2822963 27.2326934,76.1474368 C26.1516769,75.5673785 25.7119414,75.2887231 25.7119414,74.863022 C25.7119414,74.3950758 25.8656895,74.2439682 26.7292281,73.6046042 C26.9682148,73.4266871 27.2422528,73.2252103 27.5370031,72.9839255 L27.5601052,72.9644277 C27.7587676,72.8087609 27.9474241,72.640246 28.1249104,72.4599232 C28.1596335,72.4239643 28.1913435,72.3851039 28.2197084,72.3437491 C29.2639964,71.2503325 29.8436029,69.7812164 29.8328686,68.2549066 C29.8328686,64.9705706 27.2221177,62.3080903 24.0015932,62.3080903 C20.7810688,62.3080903 18.1703179,64.9705706 18.1703179,68.2549066 C18.1585162,69.7802456 18.7363526,71.248936 19.7786983,72.3429367 C19.8073228,72.3843184 19.8392998,72.4231793 19.874293,72.4591108 C20.0517793,72.6394336 20.2404358,72.8079485 20.4390982,72.9636153 L20.4622003,72.9831131 C20.7569505,73.2268351 21.0293954,73.4258747 21.2699753,73.6037917 C22.1335139,74.2431558 22.287262,74.3942634 22.287262,74.8622096 C22.287262,75.2887231 21.8467299,75.5673785 20.76651,76.1466244 C20.515574,76.2814839 20.2558751,76.4204055 19.9842269,76.5771999 C16.7340078,78.451422 14.8699116,81.5442539 14.8699116,85.0619746 C14.8699116,85.5615795 15.2670524,85.9665893 15.7569505,85.9665893 C16.2468486,85.9665893 16.6439895,85.5615795 16.6439895,85.0619746 C16.6439895,82.8506038 17.5704612,80.8374602 19.2385884,79.3263839 C19.2810515,79.3027098 19.3215483,79.2755393 19.359675,79.2451432 C22.061743,77.0048519 25.9342739,77.0048519 28.6363419,79.2451432 C28.6753207,79.2773574 28.7168921,79.3061644 28.760615,79.3312583 C30.4263523,80.843147 31.3520274,82.8546658 31.3520274,85.0644118 C31.3520274,85.5640167 31.7491683,85.9690265 32.2390664,85.9690265 C32.7289644,85.9690265 33.1261053,85.5640167 33.1261053,85.0644118 C33.1284952,81.5450664 31.2643989,78.4522344 28.0149765,76.5780123 Z M21.5535729,71.5540899 C20.4853023,70.6734411 19.9435991,69.5636937 19.9435991,68.2549066 C19.9230968,66.7627264 20.6919549,65.3748601 21.9558068,64.6226689 C23.2196587,63.8704777 24.7827311,63.8704777 26.0465831,64.6226689 C27.310435,65.3748601 28.079293,66.7627264 28.0587907,68.2549066 C28.0587907,69.5636937 27.5170875,70.6742535 26.448817,71.5540899 C24.9998947,72.6693189 23.0013426,72.6689873 21.5527762,71.5532775 L21.5535729,71.5540899 Z M23.8574046,59.7888174 C24.3501624,59.7888174 24.7496216,59.3814433 24.7496216,58.878922 C24.7496216,58.3764006 24.3501624,57.9690265 23.8574046,57.9690265 C23.3646468,57.9690265 22.9651876,58.3764006 22.9651876,58.878922 C22.9651876,59.3814433 23.3646468,59.7888174 23.8574046,59.7888174 L23.8574046,59.7888174 Z M27.9839082,60.8384467 C28.2964401,61.0226252 28.6869996,60.9966157 28.9733905,60.7725516 C29.2597814,60.5484875 29.3855737,60.1705182 29.2920852,59.8149664 C29.1985967,59.4594146 28.9042482,59.1963379 28.5463535,59.1484616 C28.1884588,59.1005853 27.8375369,59.2773429 27.6572931,59.596277 C27.4114352,60.0313124 27.5576056,60.5872218 27.9839082,60.8384467 L27.9839082,60.8384467 Z M31.18633,72.2308246 C31.0057299,72.549549 31.031234,72.947847 31.2509447,73.2399125 C31.4706555,73.531978 31.8412813,73.6602627 32.189925,73.5649218 C32.5385688,73.4695809 32.7965342,73.1694002 32.8434803,72.8044142 C32.8904264,72.4394281 32.717103,72.0815531 32.4043655,71.8977379 C31.9781387,71.6481122 31.4342214,71.7970479 31.1879232,72.2308246 L31.18633,72.2308246 Z M32.2617701,64.1879991 C32.5745076,64.004184 32.747831,63.6463089 32.7008849,63.2813229 C32.6539388,62.9163368 32.3959734,62.6161561 32.0473296,62.5208152 C31.6986859,62.4254743 31.3280601,62.5537591 31.1083494,62.8458245 C30.8886386,63.13789 30.8631345,63.5361881 31.0437346,63.8549124 C31.2912136,64.2894585 31.8372598,64.4371316 32.2633633,64.1847495 L32.2617701,64.1879991 Z M33.107783,67.1126629 C32.6150252,67.1126629 32.215566,67.520037 32.215566,68.0225583 C32.215566,68.5250797 32.6150252,68.9324537 33.107783,68.9324537 C33.6005408,68.9324537 34,68.5250797 34,68.0225583 C34.0000002,67.5203541 33.6010263,67.1131113 33.1085796,67.1126629 L33.107783,67.1126629 Z M15.784434,68.3125875 C15.784434,67.8100661 15.3849748,67.4026921 14.892217,67.4026921 C14.3994592,67.4026921 14,67.8100661 14,68.3125875 C14,68.8151089 14.3994592,69.2224829 14.892217,69.2224829 C15.3849748,69.2224829 15.784434,68.8151089 15.784434,68.3125875 Z M19.7675456,60.9830551 C20.0802831,60.7992399 20.2536065,60.4413648 20.2066604,60.0763788 C20.1597143,59.7113927 19.9017489,59.411212 19.5531051,59.3158711 C19.2044614,59.2205303 18.8338356,59.348815 18.6141249,59.6408805 C18.3944141,59.932946 18.36891,60.331244 18.5495101,60.6499684 C18.667688,60.8593339 18.8626554,61.0121788 19.0914372,61.0748126 C19.3202191,61.1374465 19.5640337,61.1047274 19.7691389,60.9838675 L19.7675456,60.9830551 Z M15.5956345,64.437408 C15.9081664,64.6215865 16.2987259,64.595577 16.5851168,64.3715129 C16.8715077,64.1474488 16.9973,63.7694795 16.9038115,63.4139277 C16.810323,63.0583759 16.5159745,62.7952991 16.1580798,62.7474229 C15.8001851,62.6995466 15.4492632,62.8763042 15.2690194,63.1952383 C15.0231615,63.6302736 15.1693319,64.1861831 15.5956345,64.437408 Z M15.7390265,72.1503963 C15.4262891,72.3342115 15.2529656,72.6920866 15.2999117,73.0570726 C15.3468578,73.4220587 15.6048233,73.7222393 15.953467,73.8175802 C16.3021108,73.9129211 16.6727365,73.7846364 16.8924473,73.4925709 C17.112158,73.2005054 17.1376622,72.8022074 16.9570621,72.483483 C16.8387534,72.274476 16.6438722,72.1219618 16.415294,72.0594951 C16.1867158,71.9970285 15.9431667,72.0297269 15.7382299,72.1503963 L15.7390265,72.1503963 Z" transform="translate(-14 -58)" />
  </svg>

const ComplexOption = (props) =>
  <div style={{ padding: '10px 0' }} {...props} />

const factories = [
  (title) => () => createBotTask(title),
  (title) => () => createHumanTask(title),
  (title) => () => createCondition(title),
]

export const DropdownContainer = () => {
  const [index, setIndex] = useState(0)

  if (!dropdownState.visible && index) {
    setIndex(0)
  }

  return (
    <Observer>
      {() =>
      dropdownState.visible ? (
        <AutoHideDropdown style={{...dropdownState.position}}>
          <div style={{
            display: 'flex',
          }}>
            <div>
              <Option active={index === 0} onClick={() => setIndex(0)}><BotIcon /> Bot Task</Option>
              <Option active={index === 1} onClick={() => setIndex(1)}><HumanIcon /> Human Task</Option>
              <Option active={index === 2} onClick={() => setIndex(2)}><ConditionIcon /> Condition</Option>
            </div>
            <div style={{
              borderRight: '1px solid rgba(151, 151, 151, .5)',
              margin: '-20px 0',
            }} />
            <div>
              <Option onClick={factories[index](`Get analytics ${index}`)}>
                <ComplexOption>
                  Get analytics {index}
                  <Description>
                    Description of Bot Task template, provides a baseline of the configuration code
                  </Description>
                </ComplexOption>
              </Option>
              <Option onClick={factories[index](`Extract people, companies and countries ${index}`)}>
                <ComplexOption>
                  Extract people, companies and countries {index}
                  <Description>
                    Description of Bot Task template
                  </Description>
                </ComplexOption>
              </Option>
              <Option onClick={factories[index](`Generate message ${index}`)}>
                <ComplexOption>
                  Generate message {index}
                  <Description>
                    Provides a baseline of the configuration code
                  </Description>
                </ComplexOption>
              </Option>
              <Option onClick={factories[index](`Get consolidated results ${index}`)}>
                <ComplexOption>
                  Get consolidated results {index}
                  <Description>
                    Description of Bot Task template, provides a baseline of the configuration code
                  </Description>
                </ComplexOption>
              </Option>
              <Option onClick={factories[index](`Prepare data ${index}`)}>
                <ComplexOption>
                  Prepare data {index}
                  <Description>
                    Description of Bot Task template
                  </Description>
                </ComplexOption>
              </Option>
            </div>
          </div>
        </AutoHideDropdown>
      ) : null}
    </Observer>
  )
}
// export const DropdownContainer = observer(DropdownContainerComponent)

let uniqId = 0

function createCondition (title) {
  dropdownState.hide()
  if (editState.inSequence) {
    if (root.components[0] === editState.component) {
      root.components.unshift({ type: 'placeholder', id: ++uniqId })
    }
    if (root.components[root.components.length - 1] === editState.component) {
      root.components.push({ type: 'placeholder', id: ++uniqId })
    }
  }
  editState.component.title = title
  editState.component.type = 'condition'
  editState.component.left = {
    type: 'placeholder',
    id: ++uniqId,
  }
  editState.component.right = {
    type: 'placeholder',
    id: ++uniqId,
  }
  window.kek()
}

function createBotTask (title) {
  dropdownState.hide()
  console.log(editState)
  if (editState.inSequence) {
    if (root.components[0] === editState.component) {
      root.components.unshift({ type: 'placeholder', id: ++uniqId })
    }
    if (root.components[root.components.length - 1] === editState.component) {
      root.components.push({ type: 'placeholder', id: ++uniqId })
    }
  }

  editState.component.type = 'bot'
  editState.component.title = title
  window.kek()

}

function createHumanTask (title) {
  dropdownState.hide()
  if (editState.inSequence) {
    if (root.components[0] === editState.component) {
      root.components.unshift({ type: 'placeholder', id: ++uniqId })
    }
    if (root.components[root.components.length - 1] === editState.component) {
      root.components.push({ type: 'placeholder', id: ++uniqId })
    }
  }

  editState.component.type = 'human'
  editState.component.title = title
  window.kek()

}
